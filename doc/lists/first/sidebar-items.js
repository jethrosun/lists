initSidebarItems({"enum":[["Link","Link is a private enum as we want to hide the implementation details"]],"struct":[["List","functional programming style: `ignore List a = Empty | Elem a (List a)` This means \"A List is either Empty or an Element followed by a List\" in functional programming. However, in Rust we don't want to have a layout like functional programming. The previous struct of `List` will give us a layout like: `ignore [Elem A, ptr] -> (Elem B, ptr) -> (Elem C, ptr) -> (Empty *junk*)<Paste> [] = Stack () = Heap` In this case a split off C means: `ignore [Elem A, ptr] -> (Elem B, ptr) -> (Empty *junk*) [Elem C, ptr] -> (Empty *junk*)` On the other hand, a Rust implementation would expect the layout and split to be like: ```ignore layout 2: [ptr] -> (Elem A, ptr) -> (Elem B, ptr) -> (Elem C, null)"],["Node","Node is a private struct"]]});