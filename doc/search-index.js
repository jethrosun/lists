var N=null,E="",T="t",U="u",searchIndex={};
var r_Aa="lists::third",r_Ba="lists::fourth",r_Ca="drop",r_Da="IterMut",r_aa="lists",r_ba="self",r_ca="next",r_da="option",r_ea="List",r_fa="head",r_ga="Node",r_ha="elem",r_ia="Link",r_ja="iter",r_ka="IntoIter",r_la="Iter",r_ma="refmut",r_na="into_iter",r_oa="intoiter",r_pa="lists::first",r_qa="result",r_ra="try_from",r_sa="borrow",r_ta="get_type_id",r_ua="typeid",r_va="try_into",r_wa="borrow_mut",r_xa="from",r_ya="into",r_za="lists::second";

searchIndex[r_aa]={"doc":E,"i":[[0,"first",r_aa,E,N,N],[3,r_ea,r_pa,"functional programming style: `ignore List a = Empty |…",N,N],[12,r_fa,E,E,0,N],[3,r_ga,E,"Node is a private struct",N,N],[12,r_ha,E,E,1,N],[12,r_ca,E,E,1,N],[4,r_ia,E,"Link is a private enum as we want to hide the…",N,N],[13,"Empty",E,E,2,N],[13,"More",E,"Because we don't know the how many elements are there…",2,N],[11,"new",E,"new() will take no parameter and construct an empty list…",0,[[],[r_ba]]],[11,"push",E,"push() will take a list and an element, and return us a…",0,[[[r_ba],["i32"]]]],[11,"pop",E,"pop() will",0,[[[r_ba]],[r_da,["i32"]]]],[0,"second",r_aa,E,N,N],[3,r_ea,r_za,E,N,N],[12,r_fa,E,E,3,N],[3,r_ga,E,E,N,N],[12,r_ha,E,E,4,N],[12,r_ca,E,E,4,N],[3,r_ka,E,"IntoIter is a type just wrapper around List.",N,N],[12,"0",E,E,5,N],[3,r_la,E,"Notes on lifetime:…",N,N],[12,r_ca,E,E,6,N],[3,r_Da,E,"We take the Option<&mut> so we have exclusive access to…",N,N],[12,r_ca,E,E,7,N],[6,r_ia,E,"Type alias: a short way to implement Link.",N,N],[11,"new",E,"Note that there nothing pointy in this method -- we don't…",3,[[],[r_ba]]],[11,"push",E,"Note: Because `mem::replace(&mut option, None)` is such an…",3,[[[r_ba],[T]]]],[11,"pop",E,"Note: `match option { None => None, Some(x) => Some(y) }`…",3,[[[r_ba]],[r_da]]],[11,"peek",E,"Note that Rust won't allow the following implementation…",3,[[[r_ba]],[r_da]]],[11,"peek_mut",E,"Mutable version of `peek()`",3,[[[r_ba]],[r_da]]],[11,"iter_mut",E,"iter_mut()",3,[[[r_ba]],["itermut"]]],[11,r_na,E,E,3,[[[r_ba]],[r_oa]]],[11,r_ja,E,"Note that this is syntax sugar for `ignore pub fn…",3,[[[r_ba]],[r_ja]]],[0,"third",r_aa,E,N,N],[3,r_ea,r_Aa,E,N,N],[12,r_fa,E,E,8,N],[3,r_ga,E,E,N,N],[12,r_ha,E,E,9,N],[12,r_ca,E,E,9,N],[3,r_la,E,E,N,N],[12,r_ca,E,E,10,N],[6,r_ia,E,E,N,N],[11,r_ja,E,E,8,[[[r_ba]],[r_ja]]],[11,"new",E,E,8,[[],[r_ba]]],[11,"append",E,"append() takes a list and an element, and returns a List",8,[[[r_ba],[T]],["list"]]],[11,"tail",E,"tail is the logical inverse of this operation. It takes a…",8,[[[r_ba]],["list"]]],[11,r_fa,E,"head() returns a reference to the first element.",8,[[[r_ba]],[r_da]]],[0,"fourth",r_aa,E,N,N],[3,r_ea,r_Ba,"A doubly linked list.",N,N],[12,r_fa,E,E,11,N],[12,"tail",E,E,11,N],[3,r_ga,E,E,N,N],[12,r_ha,E,E,12,N],[12,r_ca,E,E,12,N],[12,"prev",E,E,12,N],[3,r_ka,E,E,N,N],[12,"0",E,E,13,N],[3,r_la,E,E,N,N],[12,"0",E,E,14,N],[6,r_ia,E,"Now Rust is an incredibly verbose pervasively mutable…",N,N],[11,r_ja,E,E,11,[[[r_ba]],[r_ja]]],[11,"new",E,"Node constructor.",12,[[[T]],["rc",["refcell"]]]],[11,"new",E,"List constructor.",11,[[],[r_ba]]],[11,"push_front",E,E,11,[[[r_ba],[T]]]],[11,"pop_front",E,E,11,[[[r_ba]],[r_da]]],[11,"peek_front",E,"`ignore pub fn peek_front(&self) -> Option<&T> {…",11,[[[r_ba]],[r_da,["ref"]]]],[11,"push_back",E,E,11,[[[r_ba],[T]]]],[11,"pop_back",E,E,11,[[[r_ba]],[r_da]]],[11,"peek_back",E,E,11,[[[r_ba]],[r_da,["ref"]]]],[11,"peek_back_mut",E,E,11,[[[r_ba]],[r_da,[r_ma]]]],[11,"peek_front_mut",E,E,11,[[[r_ba]],[r_da,[r_ma]]]],[11,r_na,E,E,11,[[[r_ba]],[r_oa]]],[11,r_xa,r_pa,E,0,[[[T]],[T]]],[11,r_ya,E,E,0,[[[r_ba]],[U]]],[11,r_ra,E,E,0,[[[U]],[r_qa]]],[11,r_sa,E,E,0,[[[r_ba]],[T]]],[11,r_ta,E,E,0,[[[r_ba]],[r_ua]]],[11,r_va,E,E,0,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,0,[[[r_ba]],[T]]],[11,r_xa,E,E,1,[[[T]],[T]]],[11,r_ya,E,E,1,[[[r_ba]],[U]]],[11,r_ra,E,E,1,[[[U]],[r_qa]]],[11,r_sa,E,E,1,[[[r_ba]],[T]]],[11,r_ta,E,E,1,[[[r_ba]],[r_ua]]],[11,r_va,E,E,1,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,1,[[[r_ba]],[T]]],[11,r_xa,E,E,2,[[[T]],[T]]],[11,r_ya,E,E,2,[[[r_ba]],[U]]],[11,r_ra,E,E,2,[[[U]],[r_qa]]],[11,r_sa,E,E,2,[[[r_ba]],[T]]],[11,r_ta,E,E,2,[[[r_ba]],[r_ua]]],[11,r_va,E,E,2,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,2,[[[r_ba]],[T]]],[11,r_xa,r_za,E,3,[[[T]],[T]]],[11,r_ya,E,E,3,[[[r_ba]],[U]]],[11,r_ra,E,E,3,[[[U]],[r_qa]]],[11,r_sa,E,E,3,[[[r_ba]],[T]]],[11,r_ta,E,E,3,[[[r_ba]],[r_ua]]],[11,r_va,E,E,3,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,3,[[[r_ba]],[T]]],[11,r_xa,E,E,4,[[[T]],[T]]],[11,r_ya,E,E,4,[[[r_ba]],[U]]],[11,r_ra,E,E,4,[[[U]],[r_qa]]],[11,r_sa,E,E,4,[[[r_ba]],[T]]],[11,r_ta,E,E,4,[[[r_ba]],[r_ua]]],[11,r_va,E,E,4,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,4,[[[r_ba]],[T]]],[11,r_xa,E,E,5,[[[T]],[T]]],[11,r_na,E,E,5,[[[r_ba]],["i"]]],[11,r_ya,E,E,5,[[[r_ba]],[U]]],[11,r_ra,E,E,5,[[[U]],[r_qa]]],[11,r_sa,E,E,5,[[[r_ba]],[T]]],[11,r_ta,E,E,5,[[[r_ba]],[r_ua]]],[11,r_va,E,E,5,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,5,[[[r_ba]],[T]]],[11,r_xa,E,E,6,[[[T]],[T]]],[11,r_na,E,E,6,[[[r_ba]],["i"]]],[11,r_ya,E,E,6,[[[r_ba]],[U]]],[11,r_ra,E,E,6,[[[U]],[r_qa]]],[11,r_sa,E,E,6,[[[r_ba]],[T]]],[11,r_ta,E,E,6,[[[r_ba]],[r_ua]]],[11,r_va,E,E,6,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,6,[[[r_ba]],[T]]],[11,r_xa,E,E,7,[[[T]],[T]]],[11,r_na,E,E,7,[[[r_ba]],["i"]]],[11,r_ya,E,E,7,[[[r_ba]],[U]]],[11,r_ra,E,E,7,[[[U]],[r_qa]]],[11,r_sa,E,E,7,[[[r_ba]],[T]]],[11,r_ta,E,E,7,[[[r_ba]],[r_ua]]],[11,r_va,E,E,7,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,7,[[[r_ba]],[T]]],[11,r_xa,r_Aa,E,8,[[[T]],[T]]],[11,r_ya,E,E,8,[[[r_ba]],[U]]],[11,r_ra,E,E,8,[[[U]],[r_qa]]],[11,r_sa,E,E,8,[[[r_ba]],[T]]],[11,r_ta,E,E,8,[[[r_ba]],[r_ua]]],[11,r_va,E,E,8,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,8,[[[r_ba]],[T]]],[11,r_xa,E,E,9,[[[T]],[T]]],[11,r_ya,E,E,9,[[[r_ba]],[U]]],[11,r_ra,E,E,9,[[[U]],[r_qa]]],[11,r_sa,E,E,9,[[[r_ba]],[T]]],[11,r_ta,E,E,9,[[[r_ba]],[r_ua]]],[11,r_va,E,E,9,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,9,[[[r_ba]],[T]]],[11,r_xa,E,E,10,[[[T]],[T]]],[11,r_na,E,E,10,[[[r_ba]],["i"]]],[11,r_ya,E,E,10,[[[r_ba]],[U]]],[11,r_ra,E,E,10,[[[U]],[r_qa]]],[11,r_sa,E,E,10,[[[r_ba]],[T]]],[11,r_ta,E,E,10,[[[r_ba]],[r_ua]]],[11,r_va,E,E,10,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,10,[[[r_ba]],[T]]],[11,r_xa,r_Ba,E,11,[[[T]],[T]]],[11,r_ya,E,E,11,[[[r_ba]],[U]]],[11,r_ra,E,E,11,[[[U]],[r_qa]]],[11,r_sa,E,E,11,[[[r_ba]],[T]]],[11,r_ta,E,E,11,[[[r_ba]],[r_ua]]],[11,r_va,E,E,11,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,11,[[[r_ba]],[T]]],[11,r_xa,E,E,12,[[[T]],[T]]],[11,r_ya,E,E,12,[[[r_ba]],[U]]],[11,r_ra,E,E,12,[[[U]],[r_qa]]],[11,r_sa,E,E,12,[[[r_ba]],[T]]],[11,r_ta,E,E,12,[[[r_ba]],[r_ua]]],[11,r_va,E,E,12,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,12,[[[r_ba]],[T]]],[11,r_xa,E,E,13,[[[T]],[T]]],[11,r_na,E,E,13,[[[r_ba]],["i"]]],[11,r_ya,E,E,13,[[[r_ba]],[U]]],[11,r_ra,E,E,13,[[[U]],[r_qa]]],[11,r_sa,E,E,13,[[[r_ba]],[T]]],[11,r_ta,E,E,13,[[[r_ba]],[r_ua]]],[11,r_va,E,E,13,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,13,[[[r_ba]],[T]]],[11,r_xa,E,E,14,[[[T]],[T]]],[11,r_ya,E,E,14,[[[r_ba]],[U]]],[11,r_ra,E,E,14,[[[U]],[r_qa]]],[11,r_sa,E,E,14,[[[r_ba]],[T]]],[11,r_ta,E,E,14,[[[r_ba]],[r_ua]]],[11,r_va,E,E,14,[[[r_ba]],[r_qa]]],[11,r_wa,E,E,14,[[[r_ba]],[T]]],[11,r_Ca,r_pa,"Basically, \"when you go out of scope, I'll give you a…",0,[[[r_ba]]]],[11,r_Ca,r_za,E,3,[[[r_ba]]]],[11,r_Ca,r_Aa,"a recursive deconstructor that works in O(n)",8,[[[r_ba]]]],[11,r_Ca,r_Ba,E,11,[[[r_ba]]]],[11,r_ca,r_za,E,5,[[[r_ba]],[r_da]]],[11,r_ca,E,E,6,[[[r_ba]],[r_da]]],[11,r_ca,E,E,7,[[[r_ba]],[r_da]]],[11,r_ca,r_Aa,E,10,[[[r_ba]],[r_da]]],[11,r_ca,r_Ba,E,13,[[[r_ba]],[r_da]]],[11,"next_back",E,E,13,[[[r_ba]],[r_da]]]],"p":[[3,r_ea],[3,r_ga],[4,r_ia],[3,r_ea],[3,r_ga],[3,r_ka],[3,r_la],[3,r_Da],[3,r_ea],[3,r_ga],[3,r_la],[3,r_ea],[3,r_ga],[3,r_ka],[3,r_la]]};
initSearch(searchIndex);addSearchOptions(searchIndex);